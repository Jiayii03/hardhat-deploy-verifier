{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x023106d93578fDE902312590b2e9EDBa38C5F2b2",
    "txHash": "0x31bf888dd6ad456006ca5f36fb274bbade5e9a1465de9657162467dfa55ee36f"
  },
  "proxies": [
    {
      "address": "0x7f5b50bb94Ca80027FDe2fA00607B9d1CD51384e",
      "txHash": "0x5a40cab62a71867eb326f601fc0efcd80e0a6a08c41ba0a3957984769a6df568",
      "kind": "transparent"
    },
    {
      "address": "0x158Fc38C128D70bef153A10256FA878C0b294792",
      "txHash": "0x8aa0bc68b8595d19829c7071fcf56fe568ff2e06bb0d3bb0929d9b12bec6bbad",
      "kind": "transparent"
    },
    {
      "address": "0x691303a12A4fBfFEBdFB282336181E9A45730bfd",
      "txHash": "0x71d872ce1233317eeea2cd4e83966b555633fee2a8f4db061e836dbd5eff1a4c",
      "kind": "transparent"
    },
    {
      "address": "0x6C50E082E08365450F2231f88e1625e8EeB23dFF",
      "txHash": "0x6f01957d8f557ca9c9510e6da384d180810751962b77da5f506893ad82d01ae3",
      "kind": "transparent"
    },
    {
      "address": "0x6a8897284DF2F50Fe797A3D6665995D50BDeE69A",
      "txHash": "0x3d6fc2bd450b52aa18bb1f3ef18f8ad5525bae81091d3da34e9004573359b5be",
      "kind": "transparent"
    },
    {
      "address": "0xB2a2938ca2589ac0Ce7c437604eB41a989Fd9ae5",
      "txHash": "0xe2d63d7d696081f6e78f5c1eac3188405c252788fd36f6724881851b0a292727",
      "kind": "transparent"
    },
    {
      "address": "0x522F64d4E44D8510980780cEe616D2f0B314BF0D",
      "txHash": "0x68e45c9968bddaebb124bacba9de890b22aca1dd99a69e6c13d19b8c01df1dc1",
      "kind": "transparent"
    },
    {
      "address": "0xD7395bbf70328dD1B0cDBE4eAe0F41FF59f9e7dA",
      "txHash": "0x496ad3882e9cde7cd3a3fbb4fa19aef2679c04c626a808c2528bdd8d987ea77a",
      "kind": "transparent"
    },
    {
      "address": "0xA86E05528000991ecd10B82919f4EbB79Ff58524",
      "txHash": "0xcf0e47abca472ef01cc6b000436d58990a8777c8f62748470290cee302bc5cfa",
      "kind": "transparent"
    },
    {
      "address": "0x6b57A124b1D1865d9Ff523Cd4A59c62263a78a50",
      "txHash": "0x1a01cbd2e24767d2f07bd64b11dd4bd99c52daa6f28127f1ea8f8b39ab2057d3",
      "kind": "transparent"
    },
    {
      "address": "0xFe9F8CB5CDd914BdDF388F0Dc521993229F92Bff",
      "txHash": "0x22b633feabb0ad2537703bac18b305a43944ff002c0d20516f9b6072ccdc2c7f",
      "kind": "transparent"
    },
    {
      "address": "0x1AE569E1fe500D7E6C82CA550DD64436dc52C731",
      "txHash": "0x2c2f8221d9b4ec670b4d23b49f27d834ab5726772ffcf58b940b81010da4d733",
      "kind": "transparent"
    },
    {
      "address": "0x7f4939605F483497e151067f0a2C91221883A930",
      "txHash": "0x9e57e636b3cd047dc17c1103b2c6ff9921e231c9a1bd5f04a69428dee5b9b4a6",
      "kind": "transparent"
    },
    {
      "address": "0x622fE7Fe01e1dE9Cb1c613063e67e3Fc885d94Cd",
      "txHash": "0xf3cdcdfcb60826a1063e609cc7945db09856b2462895c96d0ee5dfcba806e9b6",
      "kind": "transparent"
    },
    {
      "address": "0xb5F471F2211d4eaD61F5bD89d8eE711ab08e86A5",
      "txHash": "0xa43aedd0eb981793144e660979709a9c5b72cbe68fc8890cc7c4b38b0f65bcea",
      "kind": "transparent"
    },
    {
      "address": "0xa2c28379AF708AeF08298694130523a56097bD15",
      "txHash": "0x8fc0280279b37d2b27f7002d703452a6e18ecc87dd58d98e860b8122d27fb770",
      "kind": "transparent"
    },
    {
      "address": "0x11C8D7894A582199CBf400dabFe0Be2fC3BB3176",
      "txHash": "0xd1342b4fc52c9cb693229fe6274a357f70882b6497e5f85ef529667ab998f550",
      "kind": "transparent"
    },
    {
      "address": "0x921bE808782590115c675CDA86B3aB61b55B502c",
      "txHash": "0x628c844060515bb702be190b60f285881183d8bf9d4ab2fed241ec3409f63d74",
      "kind": "transparent"
    }
  ],
  "impls": {
    "7dbfae3787083ce009b9a3b327bab27ea90f877c24a5c239bc402697eef9370d": {
      "address": "0x7014160E519F242b399D7c675f5C7567d86D5bAC",
      "txHash": "0xa969cefe6cc34bbd7067fb141a27f5fe266e78c8f86b288bc5fe50b002220566",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "adapters",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "contract": "ProtocolRegistry",
            "src": "contracts\\core\\ProtocolRegistry.sol:25"
          },
          {
            "label": "protocolNames",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ProtocolRegistry",
            "src": "contracts\\core\\ProtocolRegistry.sol:28"
          },
          {
            "label": "protocolIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ProtocolRegistry",
            "src": "contracts\\core\\ProtocolRegistry.sol:31"
          },
          {
            "label": "activeProtocolIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ProtocolRegistry",
            "src": "contracts\\core\\ProtocolRegistry.sol:34"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "ProtocolRegistry",
            "src": "contracts\\core\\ProtocolRegistry.sol:37"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ProtocolRegistry",
            "src": "contracts\\core\\ProtocolRegistry.sol:275"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "c91d8dd7c6be9fbb26706dc725ea9613ef60d93e9a5ede9ef54c1a0ee12900dc": {
      "address": "0x20ccC2b375D6725Bf35CDF4AAB017CdB419586f9",
      "txHash": "0x4105fa8d9b26bfdccbd32802aee87b4df6b12f960619756a259cf9de2db54221",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IAavePoolMinimal)7374",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:107"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:110"
          },
          {
            "label": "rewardsController",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IRewardsController)7447",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:113"
          },
          {
            "label": "priceOracle",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IPriceOracleGetter)7432",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:114"
          },
          {
            "label": "syncSwapRouter",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(ISyncSwapRouter)7467",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:115"
          },
          {
            "label": "aTokens",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_address)",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:118"
          },
          {
            "label": "supportedAssets",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:121"
          },
          {
            "label": "lastHarvestTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:127"
          },
          {
            "label": "minRewardAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:130"
          },
          {
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:133"
          },
          {
            "label": "weth",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:136"
          },
          {
            "label": "poolAddresses",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:139"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)50_storage",
            "contract": "AaveAdapter",
            "src": "contracts\\adapters\\AaveAdapter.sol:604"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IAavePoolMinimal)7374": {
            "label": "contract IAavePoolMinimal",
            "numberOfBytes": "20"
          },
          "t_contract(IPriceOracleGetter)7432": {
            "label": "contract IPriceOracleGetter",
            "numberOfBytes": "20"
          },
          "t_contract(IRewardsController)7447": {
            "label": "contract IRewardsController",
            "numberOfBytes": "20"
          },
          "t_contract(ISyncSwapRouter)7467": {
            "label": "contract ISyncSwapRouter",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_address))": {
            "label": "mapping(address => mapping(address => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "671c3bb004c6b16e99abbcc6a392bd1afc36ba32abe743336d5875955e31e9a5": {
      "address": "0xDA9338DA76C8CA156e7b62eFa2d576b40BC0ECcd",
      "txHash": "0x6ad2e3bb436586090f26e2897b09b1786a1ae35354b8fb0028c9c8f39fd85366",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "comet",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(CometMainInterface)8749",
            "contract": "CompoundAdapter",
            "src": "contracts\\adapters\\CompoundAdapter.sol:67"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "CompoundAdapter",
            "src": "contracts\\adapters\\CompoundAdapter.sol:70"
          },
          {
            "label": "cTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_address)",
            "contract": "CompoundAdapter",
            "src": "contracts\\adapters\\CompoundAdapter.sol:73"
          },
          {
            "label": "supportedAssets",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "CompoundAdapter",
            "src": "contracts\\adapters\\CompoundAdapter.sol:76"
          },
          {
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CompoundAdapter",
            "src": "contracts\\adapters\\CompoundAdapter.sol:79"
          },
          {
            "label": "minRewardAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "CompoundAdapter",
            "src": "contracts\\adapters\\CompoundAdapter.sol:82"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)50_storage",
            "contract": "CompoundAdapter",
            "src": "contracts\\adapters\\CompoundAdapter.sol:415"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(CometMainInterface)8749": {
            "label": "contract CometMainInterface",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "1505190e8a46fdaf3f41598c693f1c47f6ed9c0a5eb48b37377a7f1d4a877646": {
      "address": "0x3C8Ec636BE4f91bfFB80D519A42b0d2FB3a39b01",
      "txHash": "0x309afe6b590097edee5436b36b4ee1d9d9fa960940e24e1f43c7a205925e1af2",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "registry",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IRegistry)16565",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:42"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2627",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:45"
          },
          {
            "label": "redemptionRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:51"
          },
          {
            "label": "previousRedemptionRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:52"
          },
          {
            "label": "virtualVault",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(VirtualVault)16459",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:55"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:58"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:61"
          },
          {
            "label": "performanceFeeBps",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)50_storage",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:817"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_contract(IERC20)2627": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IRegistry)16565": {
            "label": "contract IRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(VirtualVault)16459": {
            "label": "contract VirtualVault",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.ERC4626": [
            {
              "contract": "ERC4626Upgradeable",
              "label": "_asset",
              "type": "t_contract(IERC20)2627",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:56"
            },
            {
              "contract": "ERC4626Upgradeable",
              "label": "_underlyingDecimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:57"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:33"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:35"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "502aba20fcf69a457c7485a700e5d0a6891410256b3fc20938885ff2ac872d50": {
      "address": "0x35302cBC82079c0724b4948203Ee076f69d6094A",
      "txHash": "0x5941e96ca1d767bcfee4ffe01e5e43b9e420e17192d5f3f7112d60f60b442544",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "combinedVault",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ICombinedVault)15273",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:39"
          },
          {
            "label": "queuedDeposits",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(QueuedDeposit)15293_storage)",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:46"
          },
          {
            "label": "queuedUsers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:47"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:50"
          },
          {
            "label": "lastProcessedIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:54"
          },
          {
            "label": "failedDeposits",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(FailedDeposit)15315_storage)",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:62"
          },
          {
            "label": "failedUsers",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:63"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)50_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:464"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ICombinedVault)15273": {
            "label": "contract ICombinedVault",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_struct(FailedDeposit)15315_storage)": {
            "label": "mapping(address => struct VirtualVault.FailedDeposit)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(QueuedDeposit)15293_storage)": {
            "label": "mapping(address => struct VirtualVault.QueuedDeposit)",
            "numberOfBytes": "32"
          },
          "t_struct(FailedDeposit)15315_storage": {
            "label": "struct VirtualVault.FailedDeposit",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "retryCount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "lastAttempt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(QueuedDeposit)15293_storage": {
            "label": "struct VirtualVault.QueuedDeposit",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)2627": {
            "label": "contract IERC20"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.ERC4626": [
            {
              "contract": "ERC4626Upgradeable",
              "label": "_asset",
              "type": "t_contract(IERC20)2627",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:56"
            },
            {
              "contract": "ERC4626Upgradeable",
              "label": "_underlyingDecimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:57"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:33"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:35"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "f14b3e63b605ba9e780f98eb2c921f98c44c63c804f6c89c642e24cf0f3c9823": {
      "address": "0xCE05E0D81B4F9Ae0C183f90df132A14A89B10D0f",
      "txHash": "0x88490a71dd91e3fc28f24658a8bf75034b30bb65d86490f8b09a5fd4742e5127",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "registry",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IRegistry)16513",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:42"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2627",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:45"
          },
          {
            "label": "redemptionRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:51"
          },
          {
            "label": "previousRedemptionRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:52"
          },
          {
            "label": "virtualVault",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(VirtualVault)16407",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:55"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:58"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:61"
          },
          {
            "label": "performanceFeeBps",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)50_storage",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:803"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_contract(IERC20)2627": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IRegistry)16513": {
            "label": "contract IRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(VirtualVault)16407": {
            "label": "contract VirtualVault",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.ERC4626": [
            {
              "contract": "ERC4626Upgradeable",
              "label": "_asset",
              "type": "t_contract(IERC20)2627",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:56"
            },
            {
              "contract": "ERC4626Upgradeable",
              "label": "_underlyingDecimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:57"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:33"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:35"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "7bc3640574f5d43c368d25d111fdf8efefa6457fb0e54901e8e69822b0d478c6": {
      "address": "0x0B1c56ef7Dc8322176271DCdF8DAA8F123Ccf355",
      "txHash": "0xd6552a48425db48dadbaece9717f52fb2b935866016237b5387c104bf5a79e3e",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "combinedVault",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ICombinedVault)10120",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:39"
          },
          {
            "label": "queuedDeposits",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(QueuedDeposit)10140_storage)",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:46"
          },
          {
            "label": "queuedUsers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:47"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:50"
          },
          {
            "label": "lastProcessedIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:54"
          },
          {
            "label": "failedDeposits",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(FailedDeposit)10162_storage)",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:62"
          },
          {
            "label": "failedUsers",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:63"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)50_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:455"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ICombinedVault)10120": {
            "label": "contract ICombinedVault",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_struct(FailedDeposit)10162_storage)": {
            "label": "mapping(address => struct VirtualVault.FailedDeposit)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(QueuedDeposit)10140_storage)": {
            "label": "mapping(address => struct VirtualVault.QueuedDeposit)",
            "numberOfBytes": "32"
          },
          "t_struct(FailedDeposit)10162_storage": {
            "label": "struct VirtualVault.FailedDeposit",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "retryCount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "lastAttempt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(QueuedDeposit)10140_storage": {
            "label": "struct VirtualVault.QueuedDeposit",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)2479": {
            "label": "contract IERC20"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.ERC4626": [
            {
              "contract": "ERC4626Upgradeable",
              "label": "_asset",
              "type": "t_contract(IERC20)2479",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:56"
            },
            {
              "contract": "ERC4626Upgradeable",
              "label": "_underlyingDecimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:57"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:33"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:35"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "1b0b490109394017d89ac1f7d35541cdc756b483d52f81e363e2409da0c90f80": {
      "address": "0x0837D41D494B444535B7c20cD1f7d33840f4936D",
      "txHash": "0x7d609be4ff1e6e8c9a82c8c617976b2e7025c1e25f4d82cb69379fe52b17966b",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "registry",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IRegistry)11401",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:42"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2479",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:45"
          },
          {
            "label": "redemptionRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:51"
          },
          {
            "label": "previousRedemptionRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:52"
          },
          {
            "label": "virtualVault",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(VirtualVault)11295",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:55"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:58"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:61"
          },
          {
            "label": "performanceFeeBps",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)50_storage",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:847"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_contract(IERC20)2479": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IRegistry)11401": {
            "label": "contract IRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(VirtualVault)11295": {
            "label": "contract VirtualVault",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.ERC4626": [
            {
              "contract": "ERC4626Upgradeable",
              "label": "_asset",
              "type": "t_contract(IERC20)2479",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:56"
            },
            {
              "contract": "ERC4626Upgradeable",
              "label": "_underlyingDecimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:57"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:33"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:35"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "f8651459f04409e586b0cdbe5b638b46404a6f60f753ac78a711b71d3253cb6f": {
      "address": "0x1827aF5782Ed6bf3F8054edA2f9Aa6E48a1EBB36",
      "txHash": "0xf09729f5adf3d2774bcbe369d4b7517d137f3067d1caa942454f031029700fe4",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "registry",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IRegistry)10573",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:42"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2479",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:45"
          },
          {
            "label": "redemptionRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:51"
          },
          {
            "label": "previousRedemptionRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:52"
          },
          {
            "label": "virtualVault",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(VirtualVault)10467",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:55"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "5",
            "type": "t_address",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:58"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:61"
          },
          {
            "label": "performanceFeeBps",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:62"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)50_storage",
            "contract": "CombinedVault",
            "src": "contracts\\core\\CombinedVault.sol:847"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_contract(IERC20)2479": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IRegistry)10573": {
            "label": "contract IRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(VirtualVault)10467": {
            "label": "contract VirtualVault",
            "numberOfBytes": "20"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.ERC4626": [
            {
              "contract": "ERC4626Upgradeable",
              "label": "_asset",
              "type": "t_contract(IERC20)2479",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:56"
            },
            {
              "contract": "ERC4626Upgradeable",
              "label": "_underlyingDecimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:57"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:33"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:35"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "183b382ac2d564e1fbe54f59422ad5f0ae51d0c8752dcebe969508cda41a3929": {
      "address": "0xc12C9abF60125dA968BC634DFD1F8Eb9De27EC03",
      "txHash": "0x38ad642e76a68a7d13d5e4194829b573d39533faa571e9471ce3f3316a33bc6d",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "combinedVault",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ICombinedVault)9305",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:39"
          },
          {
            "label": "queuedDeposits",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(QueuedDeposit)9325_storage)",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:46"
          },
          {
            "label": "queuedUsers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:47"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:50"
          },
          {
            "label": "lastProcessedIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:54"
          },
          {
            "label": "failedDeposits",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(FailedDeposit)9347_storage)",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:62"
          },
          {
            "label": "failedUsers",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:63"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)50_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:455"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ICombinedVault)9305": {
            "label": "contract ICombinedVault",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_struct(FailedDeposit)9347_storage)": {
            "label": "mapping(address => struct VirtualVault.FailedDeposit)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(QueuedDeposit)9325_storage)": {
            "label": "mapping(address => struct VirtualVault.QueuedDeposit)",
            "numberOfBytes": "32"
          },
          "t_struct(FailedDeposit)9347_storage": {
            "label": "struct VirtualVault.FailedDeposit",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "retryCount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "lastAttempt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(QueuedDeposit)9325_storage": {
            "label": "struct VirtualVault.QueuedDeposit",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)2479": {
            "label": "contract IERC20"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.ERC4626": [
            {
              "contract": "ERC4626Upgradeable",
              "label": "_asset",
              "type": "t_contract(IERC20)2479",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:56"
            },
            {
              "contract": "ERC4626Upgradeable",
              "label": "_underlyingDecimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:57"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:33"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:35"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    },
    "25ae7d1f5200914bc33b96e0a23f2ff0e36fc32a52de57c03b2937420a20ee42": {
      "address": "0x18818CD024c153F24724bCC324E7C7Cf28A75fE7",
      "txHash": "0x12b1a95d7621feddf68fcf7630c7a51a78cf6a32ffc0c8f5f73bddbba724b243",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "combinedVault",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ICombinedVault)10130",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:39"
          },
          {
            "label": "queuedDeposits",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(QueuedDeposit)10150_storage)",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:46"
          },
          {
            "label": "queuedUsers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:47"
          },
          {
            "label": "authorizedCaller",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:50"
          },
          {
            "label": "lastProcessedIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:54"
          },
          {
            "label": "failedDeposits",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(FailedDeposit)10172_storage)",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:62"
          },
          {
            "label": "failedUsers",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:63"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)50_storage",
            "contract": "VirtualVault",
            "src": "contracts\\core\\VirtualVault.sol:473"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(ICombinedVault)10130": {
            "label": "contract ICombinedVault",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_struct(FailedDeposit)10172_storage)": {
            "label": "mapping(address => struct VirtualVault.FailedDeposit)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(QueuedDeposit)10150_storage)": {
            "label": "mapping(address => struct VirtualVault.QueuedDeposit)",
            "numberOfBytes": "32"
          },
          "t_struct(FailedDeposit)10172_storage": {
            "label": "struct VirtualVault.FailedDeposit",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "retryCount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "lastAttempt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(QueuedDeposit)10150_storage": {
            "label": "struct VirtualVault.QueuedDeposit",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "exists",
                "type": "t_bool",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)2479": {
            "label": "contract IERC20"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.ERC4626": [
            {
              "contract": "ERC4626Upgradeable",
              "label": "_asset",
              "type": "t_contract(IERC20)2479",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:56"
            },
            {
              "contract": "ERC4626Upgradeable",
              "label": "_underlyingDecimals",
              "type": "t_uint8",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\extensions\\ERC4626Upgradeable.sol:57"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:33"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:35"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC20\\ERC20Upgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73"
            }
          ]
        }
      }
    }
  }
}
